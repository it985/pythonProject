import asyncio
import aiohttp
import logging
import sys
from typing import List, Dict, Any
from config import API_CONFIG
from utils import random_delay, get_fans_range, save_to_file, ensure_data_dir, log_error


# 配置日志
def setup_logging():
    # 创建日志记录器
    logger = logging.getLogger()
    logger.setLevel(logging.INFO)

    # 创建日志格式
    formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')

    # 创建文件处理器
    file_handler = logging.FileHandler('crawler.log', encoding='utf-8')
    file_handler.setLevel(logging.INFO)
    file_handler.setFormatter(formatter)

    # 创建控制台处理器
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setLevel(logging.INFO)
    console_handler.setFormatter(formatter)

    # 添加处理器到记录器
    logger.addHandler(file_handler)
    logger.addHandler(console_handler)


class BilibiliFansCrawler:
    def __init__(self):
        self.session = None
        self.processed_count = 0
        self.failed_count = 0
        self.fans_stats = {
            '10w': 0,
            '30w': 0,
            '60w': 0,
            '90w': 0,
            '100w': 0
        }
        logging.info("爬虫初始化完成")

    async def init_session(self):
        """初始化会话"""
        try:
            if not self.session:
                headers = {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
                    'Referer': 'https://www.bilibili.com',
                    'Origin': 'https://www.bilibili.com',
                    'Accept': 'application/json, text/plain, */*',
                    'Accept-Language': 'zh-CN,zh;q=0.9,en;q=0.8',
                    'Accept-Encoding': 'gzip, deflate, br',
                    'Connection': 'keep-alive'
                }
                self.session = aiohttp.ClientSession(headers=headers)
                logging.info("会话初始化完成")
        except Exception as e:
            log_error("初始化会话失败", e)
            raise

    async def close_session(self):
        """关闭会话"""
        try:
            if self.session:
                await self.session.close()
                self.session = None
                logging.info("会话已关闭")
        except Exception as e:
            log_error("关闭会话失败", e)

    async def get_user_info(self, uid: int) -> Dict[str, Any]:
        """获取用户信息"""
        logging.info(f"开始获取用户 {uid} 的信息")
        for i in range(API_CONFIG['retry_times']):
            try:
                url = f"https://api.bilibili.com/x/web-interface/card?mid={uid}"
                async with self.session.get(url) as response:
                    if response.status == 200:
                        data = await response.json()
                        print(f"API响应: {data}")

                        if data['code'] == 0 and 'data' in data:
                            user_data = data['data']
                            print(f"用户数据: {user_data}")

                            # 从data中获取粉丝数
                            if 'follower' in user_data:
                                print(f"获取到粉丝数: {user_data['follower']}")
                                return user_data
                            else:
                                print("警告: 未找到粉丝数信息")
                                print(f"用户数据字段: {list(user_data.keys()) if user_data else 'None'}")
                        else:
                            print(f"API返回错误: {data['message']}")
                            if data['code'] == -352:
                                print("请求被限制，等待后重试...")
                                await asyncio.sleep(API_CONFIG['min_delay'] * 2)
                    else:
                        print(f"HTTP请求失败: {response.status}")

                logging.info(f"成功获取用户 {uid} 的信息")
                return None
            except Exception as e:
                log_error(f"获取用户 {uid} 信息失败 (尝试 {i + 1}/{API_CONFIG['retry_times']})", e)
                if i < API_CONFIG['retry_times'] - 1:
                    await asyncio.sleep(API_CONFIG['min_delay'] * (i + 1))
        return None

    async def process_user(self, uid: int):
        """处理单个用户"""
        try:
            info = await self.get_user_info(uid)
            if not info:
                self.failed_count += 1
                logging.error(f"用户 {uid} 处理失败")
                return

            # 获取粉丝数
            fans_count = info.get('follower', 0)
            print(f"\n处理用户 {uid}:")
            print(f"获取到的粉丝数: {fans_count}")

            # 确保粉丝数是整数
            try:
                fans_count = int(fans_count)
            except (ValueError, TypeError):
                print(f"警告: 粉丝数转换失败，原始值: {fans_count}")
                fans_count = 0

            range_key = get_fans_range(fans_count)
            print(f"分类结果: {range_key}")

            save_to_file(uid, fans_count, range_key)
            self.fans_stats[range_key] += 1
            self.processed_count += 1

            if self.processed_count % 10 == 0:
                self.print_stats()

        except Exception as e:
            log_error(f"处理用户 {uid} 失败", e)
            self.failed_count += 1

    def print_stats(self):
        """打印统计信息"""
        print("\n当前统计信息:")
        print(f"总处理数: {self.processed_count}")
        print(f"失败数: {self.failed_count}")
        print("\n粉丝数分布:")
        print(f"10w以下: {self.fans_stats['10w']}个")
        print(f"10w-30w: {self.fans_stats['30w']}个")
        print(f"30w-60w: {self.fans_stats['60w']}个")
        print(f"60w-90w: {self.fans_stats['90w']}个")
        print(f"90w以上: {self.fans_stats['100w']}个")
        print("-" * 30)

    async def process_batch(self, uids: List[int]):
        """处理一批用户"""
        tasks = []
        for uid in uids:
            task = asyncio.create_task(self.process_user(uid))
            tasks.append(task)
            await asyncio.sleep(API_CONFIG['min_delay'])

        await asyncio.gather(*tasks)
        await asyncio.sleep(API_CONFIG['batch_delay'])

    async def process_users(self, uids: List[int]):
        """批量处理用户"""
        logging.info(f"开始处理 {len(uids)} 个用户")
        try:
            await self.init_session()
            ensure_data_dir()

            # 分批处理用户
            batch_size = API_CONFIG['batch_size']
            for i in range(0, len(uids), batch_size):
                batch = uids[i:i + batch_size]
                logging.info(f"处理第 {i // batch_size + 1} 批，共 {len(batch)} 个用户")
                await self.process_batch(batch)

            await self.close_session()
            self.print_stats()
            logging.info(f"处理完成! 成功: {self.processed_count}, 失败: {self.failed_count}")
        except Exception as e:
            log_error("批量处理用户失败", e)
            raise


async def main():
    # 使用一些不同粉丝数的UP主UID作为示例
    uids =[2392,35641,99673,107540,121075,154020,155886,158379,163683,165444,173331,179628,200870,207411,213371,240613,257976,304600,316019,348470,351111,355818,405658,412652,415192,427657,432504,462628,492151,501179,513523,517350,533392,533612,552625,582537,639050,653594,657200,657268,661659,724686,734065,734221,756372,757285,772214,799427,802780,832316,857542,874267,876927,935459,939756,941699,953849,1111078,1282559,1330381,1351512,1360319,1387875,1490811,1495593,1500712,1522875,1537692,1556458,1598909,1627779,1635704,1668276,1677108,1692284,1710060,1734087,1761141,1788423,1798383,1807165,1843488,1868296,1912801,1927708,1965671,1974737,1982712,1994065,2027593,2032696,2050925,2065486,2068379,2144830,2156921,2179809,2181690,2204609,2212966,2232907,2249687,2257389,2308845,2329214,2419147,2439264,2473575,2488966,2503205,2525493,2539284,2552466,2569436,2612004,2628919,2643668,2650207,2712662,2734455,2736608,2749705,2772846,2792285,2820158,2856803,2929824,2933819,2953365,2984162,3015961,3072487,3112599,3150257,3169583,3176606,3233801,3245172,3267615,3277311,3324240,3490025,3500297,3567612,3603697,3643801,3675548,3719638,3721501,3777938,3795171,3837856,3850090,3859235,3901673,3912228,4061553,4068676,4162578,4168769,4196837,4227262,4369975,4433440,4441160,4531816,4533620,4541745,4550634,4556470,4605126,4609445,4632990,4635228,4684911,4688871,4737134,4743271,4785556,4817979,4832669,4940071,5029270,5222265,5242228,5329689,5373557,5390380,5419194,5450314,5475087,5508065,5613731,5627891,5837439,5925230,6031707,6077629,6103183,6191053,6260542,6273670,6340365,6352040,6410311,6455397,6486006,6523303,6677323,6684856,6699082,6732428,6744395,6770574,6793501,6844293,6901655,6954083,6963619,7043613,7090645,7137186,7182093,7183391,7199064,7261735,7399330,7478606,7493497,7518327,7519986,7545531,7576336,7589795,7682885,7707374,7826957,7827419,7870459,7880904,7894172,7913190,7942994,7981027,8022119,8026753,8071322,8079261,8090267,8105073,8105847,8126941,8138925,8152984,8158734,8176727,8220824,8259714,8279080,8315419,8393023,8407512,8437745,8439433,8653725,8659467,8691918,8707421,8719023,8846596,8910165,8915872,8941701,9013330,9039736,9062384,9122396,9186797,9207684,9215190,9254410,9287927,9406800,9550343,9592178,9617877,9621611,9642297,9913291,9984798,10014176,10020213,10078759,10162388,10318020,10402841,10508940,10613875,10665255,10760577,10930747,10995506,10997272,11000283,11137283,11160342,11201480,11247508,11287417,11291636,11293248,11316668,11340073,11344275,11363665,11387066,11468481,11553708,11571054,11571441,11595736,11637584,11646961,11713179,11725939,11800849,11836691,11896314,11918927,11922457,11941605,11945820,11969173,12044536,12079823,12094231,12139636,12224340,12312567,12401873,12476084,12480406,12484706,12520562,12619654,12625192,12658770,12745137,12753800,12817882,12869948,12877713,12968761,13063454,13071706,13086006,13090765,13098786,13157516,13176071,13226104,13324452,13352019,13358610,13421800,13422676,13424782,13437296,13505409,13547157,13577425,13637300,13696343,13853971,13894883,13931495,13975710,13984201,13990537,13992372,14041340,14056649,14123992,14149004,14201002,14362291,14418463,14424480,14458331,14479703,14536052,14588622,14629610,14655931,14810274,14896432,14901389,14929684,14978220,14984026,15116573,15245239,15252807,15298110,15300221,15324163,15343993,15346949,15451200,15660820,15875646,16020623,16287617,16394817,16536291,16920276,17079945,17100208,17270000,17458855,17472013,17640059,17894575,17946972,18005478,18083624,18101791,18187469,18228520,18237035,18237423,18275448,18344418,18449868,18465058,18563812,18631512,18717335,18890119,18906641,18947676,18977950,18992053,19009475,19052075,19139565,19279326,19350359,19572662,19595667,19952191,20002415,20232089,20317171,20553551,20646118,20751463,20763623,20797482,20948397,21012764,21044632,21052082,21095193,21114064,21395252,21656841,21870710,22126254,22205138,22327226,22418346,22609783,22664061,22758149,22893926,23214523,23249927,23531207,23658843,23846737,23895003,24225876,24535489,24798182,25117914,25181481,25255021,25371964,25730340,25806515,25811745,25896743,25963167,26273515,26755135,26888016,27176299,27283950,27527055,27529017,27759417,28720706,28835716,28843012,29003714,29065878,29112824,29248907,29779671,29954824,30108493,30165869,30513644,30642469,31100478,31125978,31610297,31955376,32193494,32249054,32281614,32484559,32488186,32576459,32576862,32771591,32825958,32862072,32933514,33089686,33210614,33270562,33301959,33360176,33401600,33833458,33899229,33929566,34305464,34362590,34460570,34616641,34740453,34753408,34758487,34776889,34976325,35384562,36565870,36811595,36828624,37051101,37310146,37478122,37825806,38073026,38131646,38342742,38388098,38784923,38866397,38877647,39505811,39727501,39770108,40449957,40658535,41842565,42318628,42837648,43474089,43554207,43677430,44744929,45061078,45073043,45255738,45271318,45405640,45474011,46405157,46463674,46586117,50356503,50361073,50895274,51413075,51916133,52508471,52693964,53142351,55068919,55405975,57294014,59172820,59267961,62050133,65833542,65921821,67188987,67836911,67957110,68125029,72907224,73015340,73439696,77082538,79378655,79394495,80415725,85181880,86235695,86396100,86644166,86709467,87148017,87663147,91513092,92438601,93390021,94751226,95166053,95948010,97128116,99004265,100030168,100137247,102393994,102748650,102966998,104934805,107276506,109614541,117151316,123079048,130974479,135405016,139221402,143900869,147698033,150460509,153847290,157792060,162085089,164880489,170065165,177060569,178220526,194662193,199608782,202175291,202316601,207604981,212592145,215232880,216930001,218527366,220927367,221809558,236016162,236171317,240319169,241106226,241150457,242032645,247250115,248357197,249031162,250615209,253276208,261525477,261704090,263758610,267003075,275219184,275550340,275981276,276347564,276539217,276955979,277455115,283826797,286644309,287106282,290437296,294854195,294956927,295014092,295553167,300540402,302092592,303153314,303175759,306234864,312203166,315553053,319137463,319356610,323883211,326746255,330240771,337336086,340424742,341272499,343815089,344270893,345024422,345731380,346351858,351753622,351753822,351928088,353431322,354024384,355680521,356383281,356436796,357046010,357742736,358166304,360996094,362085304,362418926,372169158,372273891,372601994,375152287,378392304,378987060,381671526,382334404,383097945,383814945,384906736,384924377,384929788,385019944,385282068,386608226,387401772,389280117,389374321,390853363,393342019,393884435,395200894,396296700,396870943,396943900,397188403,397253364,397650815,402825135,403581245,404587299,408641462,413692694,417400081,417477150,419094705,420298801,423472518,429515618,429545027,429835752,430136831,430705094,431376375,431891572,431930596,432582303,434262407,434412735,436169432,436832955,438326839,442375417,444346728,445415887,446109324,446665789,450112114,451199338,453816148,453956792,455864296,456802009,470768970,470925701,471781033,474941551,475435354,475935889,478189040,479742728,481097743,484441494,486113516,486330435,487417170,487421847,489670696,490348739,491005009,492229615,492628343,493244077,495126769,498437959,499445692,500010733,504249665,507470973,508317181,510596938,511490651,514658250,518973176,519491852,523506825,524635090,524679097,531442285,535301524,543916979,544006385,544293361,545167493,567192715,573858992,579835627,583600405,589959525,601600161,622120239,625115765,626680500,629240028,629469686,631670572,650122962,650650208,650973509,673858598,675203454,677770326,688210069,688861225,1079373656,1148073688,1152099855,1160023294,1164069297,1166443766,1167199471,1201702140,1213071934,1219192524,1272346717,1274038066,1348034657,1364822947,1436796720,1439661639,1445961753,1490723607,1522917697,1525569786,1549932960,1556546284,1557731479,1617681184,1621997048,1633788818,1644603990,1649515639,1662314152,1671967067,1721699385,1722495706,1729763232,1744837989,1747301330,1759819116,1798358189,1821835871,1862136897,1892019649,1911301424,1923401453,1926090666,1950240900,1974306572,1985408260,2012539060,2033751763,2040156665,2052899733,3546636452104655,3461574045993617,3546665977907817,3546590031644699,3546374834489937,3546633975368271,3493280933218746,3546556854700733,3546582349777315,3537106366367822,3546571132111646,3493298704485308,3546648112270152,3546759909345457,3493117948856868,3494354668751257,3494375287950206,3494353540484003,3493267719064292,3493090102872530,44524,397289,433715,487541,614469,749966,780699,814727,1600142,1712436,1949755,2378703,2400404,2790735,2835870,2946474,2966000,2976686,3052449,4093899,4146461,4403808,4427860,4568488,4683149,4796303,5142241,5367530,5462540,6292059,6784676,6786221,6799052,7014232,7370915,7823340,8066835,8322726,8579480,8596630,8758883,8848973,8976925,10494755,10757155,11252945,11542325,11811464,12119403,12474129,12514033,12541196,13346799,13350411,13542382,14023899,14169700,15404697,15434335,15840422,16668448,17783613,18062389,18523100,18701109,20827413,23963240,25135049,27231887,36187475,37534242,52933528,94508008,97094885,107305141,111522114,115065744,140226477,168788411,211839481,245834151,248305128,267666270,275209169,284194350,298462732,323737328,330657633,347563264,354962346,356546643,378851290,393004980,434476793,499481922,502909621,503603181,523211731,523693744,559948041,640567930,661005855,1899328430,3493140382091357,5276,119418,269558,492393,498806,622863,837470,941422,1690404,1845381,1851105,1905878,2337891,2791213,2851020,3403527,3442582,3590414,4407376,4435541,6210612,7151101,7815300,8060090,8447574,11473818,13410681,13647660,14079121,15049310,15183062,15251488,17042620,17328861,17715586,19936565,21103896,23085689,27441982,34781714,34967693,72282460,84465926,138789848,250620366,252557254,270317383,481450341,3494358099692362,463999,642922,1852181,2743119,3904677,5028996,8315451,10139490,10941893,12473905,20067185,20157055,26177922,30952147,31968078,154506630,262888220,409793037,455511061,49676,116683,378034,475250,521444,632887,848008,900171,1526101,1600113,2009929,2223018,2378908,2689967,2691287,5128039,6997378,7375428,8366990,8581342,9153331,10673533,10893225,11605312,15385187,16539048,18841842,20912836,21648772,23400436,26328593,27565758,31761139,34579852,35579222,365135915,376057527,382894360,397044296,533996453,1323218982,1338715561,]
    print("开始运行爬虫...")
    crawler = BilibiliFansCrawler()
    await crawler.process_users(uids)


if __name__ == "__main__":
    print("程序启动...")
    setup_logging()  # 设置日志
    asyncio.run(main())